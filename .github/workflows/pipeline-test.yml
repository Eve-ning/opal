# This workflow will build opal, install its build, then runs the tests with pytest.


name: Test Model Pipeline Inference

on: [ pull_request ]
jobs:
  build:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Execute Pipeline
        working-directory: src/
        shell: bash
        run: ./pipeline.sh cache

      - name: Get Docker Logs on Fail
        working-directory: src/
        if: always()
        run: |
          for SVC in 1.preprocess 2.svness 3.preprocess 4.export; do
            docker compose \
            --profile files \
            -f preprocess/docker-compose.yml \
            --env-file preprocess/osu-data-docker/.env \
            logs $SVC > ${SVC}.log
          done

      - name: Check Pipeline Cache
        working-directory: src/.pipeline_cache
        run: |
          [ -f cache.env ] || { echo "Cache file not found"; exit 1; }
          cat cache.env >> $GITHUB_ENV

      - name: Export src as Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: src
          path: src/
